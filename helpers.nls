
; ==========
; VECTOR HELPERS
; ==========
to-report v-add [a b]
  report list (item 0 a + item 0 b) (item 1 a + item 1 b)
end

to-report v-sub [a b]
  report list (item 0 a - item 0 b) (item 1 a - item 1 b)
end

to-report v-scale [a s]
  report list (item 0 a * s) (item 1 a * s)
end

to-report v-scale-add [p vec s]
  report list (item 0 p + item 0 vec * s) (item 1 p + item 1 vec * s)
end

to-report v-mag [a]
  report sqrt ((item 0 a) ^ 2 + (item 1 a) ^ 2)
end

to-report unit [a]
  let m v-mag a
  if m = 0 [ report list 0 0 ]
  report list ((item 0 a) / m) ((item 1 a) / m)
end

to-report limit-speed [a s]
  let m v-mag a
  if m > s [ report v-scale (unit a) s ]
  report a
end

to-report vector-to [tx ty]
  report list (tx - xcor) (ty - ycor)
end

to-report vector-from [sx sy tx ty]
  report list (sx - tx) (sy - ty)
end

;; helper: add weighted vec to accumulator
to-report v-plus [acc vec w]
  report v-add acc (v-scale vec w)
end

to-report v-distance [v1 v2]
  let d_x (item 0 v1 - item 0 v2)
  let d_y (item 1 v1 - item 1 v2)
  report sqrt (d_x ^ 2 + d_y ^ 2)
end

to-report normalize-vector [v]
  let mag v-mag v
  if mag = 0 [ report list 0 0 ]
  report list ((item 0 v) / mag) ((item 1 v) / mag)
end

to-report dot-product [v1 v2]
  report (item 0 v1) * (item 0 v2) + (item 1 v1) * (item 1 v2)
end

to-report O [z]
  ifelse z >= 0 [ report z ] [ report 0 ]
end