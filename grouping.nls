
to-report spawn-safe? [nx ny myr]
  ifelse can-move-to nx ny and not would-overlap? nx ny myr [ report true ]
  [ report false ]
end

to-report next-spot
  let p item (spot-index mod length spawn-spots) spawn-spots
  set spot-index spot-index + 1
  report p 
end

to-report floor-patches-ordered
  let margin 1
  let candidates patches with [
    pxcor > (min-pxcor + margin) and pxcor < (max-pxcor - margin) and
    pycor > (min-pycor + margin) and pycor < (max-pycor - margin) and
    not any? obstacles-here
  ]
  report sort-by
    [[a b] ->
      ([pycor] of a > [pycor] of b) or
      (([pycor] of a = [pycor] of b) and ([pxcor] of a < [pxcor] of b))
    ]
    (sort candidates)
end

to init-spawn-system
  set group-colors [ red blue green orange pink cyan violet brown ]
  set next-gid 0
  set spot-index 0
  set spawn-spots floor-patches-ordered
  if empty? spawn-spots [
    user-message "No free floor patches to spawn on."; stop
  ]
end

to-report jitter-around [cx cy radius]
  let ang   random-float 360
  ;; sqrt for uniform-in-disk sampling
  let dist  radius * sqrt random-float 1
  report (list (cx + dist * cos ang) (cy + dist * sin ang))
end

to-report random-center-patch [margin tries]
  ;; Try up to `tries` times to find a clean patch away from borders
  let a tries
  while [a > 0] [
    let p one-of patches with [
      pxcor > (min-pxcor + margin) and pxcor < (max-pxcor - margin) and
      pycor > (min-pycor + margin) and pycor < (max-pycor - margin) and
      not any? obstacles-here
    ]
    if p != nobody [ report p ]
    set a a - 1
  ]
  ;; Fallback (should be rare): center of world
  report patch 0 0
end

to spawn-groups-observer [people-count group-size]
  ;; Call this from SETUP (observer context).
  if people-count <= 0 or group-size <= 0 [ stop ]

  ;; You said sliders ensure exact divisibility (no leftovers)
  let num-groups people-count / group-size

  ;; parameters
  let margin     2          ;; keep group centers away from borders
  let spread     1.2        ;; radius around the group center to place members
  let tries-pt   30         ;; attempts per member to find a safe point
  let mysize     1.2
  let myr        mysize / 2

  repeat num-groups [
    ;; choose a fresh, random center for THIS group
    let center    random-center-patch margin 200
    let cx        [pxcor] of center
    let cy        [pycor] of center

    ;; new group id/color
    set next-gid next-gid + 1
    let gcol item ((next-gid - 1) mod (length group-colors)) group-colors

    ;; create all members at once (observer-only)
    create-people group-size [
      ;; find a safe jittered spot around (cx, cy)
      let k tries-pt
      let pos nobody
      while [k > 0 and pos = nobody] [
        let cand jitter-around cx cy spread
        let nx item 0 cand
        let ny item 1 cand
        if spawn-safe? nx ny myr [ set pos cand ]
        set k k - 1
      ]
      ;; fallback: use the center itself if all tries failed
      if pos = nobody [ set pos (list cx cy) ]

      ;; place and initialize
      setxy (item 0 pos) (item 1 pos)
      set size mysize
      set r myr
      set weight 70
      set velocity (list (random-float 1 - 0.5) (random-float 1 - 0.5))
      set gamma random-float 0.1

      ;; parameters derived from radius (your table)
      set ease-dist      10 * r
      set avoid_dist     2 * r + 2
      set centroid_dist  8 * r
      set alignment_dist 4 * r

      set goal-factor        6.5
      set cohesion-factor    1.5
      set separation-factor  2.5
      set alignment-factor   1.5
      set obstacle-factor    3.5

      set group-id next-gid
      set group-color gcol
      set color group-color
    ]
  ]
end