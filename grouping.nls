to-report next-spot
  let p item (spot-index mod length spawn-spots) spawn-spots
  set spot-index spot-index + 1
  report p 
end

to-report floor-patches-ordered
  let margin 1
  let candidates patches with [
    pxcor > (min-pxcor + margin) and pxcor < (max-pxcor - margin) and
    pycor > (min-pycor + margin) and pycor < (max-pycor - margin) and
    not any? obstacles-here
  ]
  report sort-by
    [[a b] ->
      ([pycor] of a > [pycor] of b) or
      (([pycor] of a = [pycor] of b) and ([pxcor] of a < [pxcor] of b))
    ]
    (sort candidates)
end

to init-spawn-system
  set group-colors [ red blue green orange pink cyan violet brown ]
  set next-gid 0
  set spot-index 0
  set spawn-spots floor-patches-ordered
  if empty? spawn-spots [
    user-message "No free floor patches to spawn on."; stop
  ]
end

to-report jitter-around [cx cy radius]
  let ang   random-float 360
  ;; sqrt for uniform-in-disk sampling
  let dist  radius * sqrt random-float 1
  report (list (cx + dist * cos ang) (cy + dist * sin ang))
end

to-report random-center-patch [margin tries]
  ;; Try up to `tries` times to find a clean patch away from borders
  let a tries
  while [a > 0] [
    let p one-of patches with [
      pxcor > (min-pxcor + margin) and pxcor < (max-pxcor - margin) and
      pycor > (min-pycor + margin) and pycor < (max-pycor - margin) and
      not any? obstacles-here
    ]
    if p != nobody [ report p ]
    set a a - 1
  ]
  ;; Fallback (should be rare): center of world
  report patch 0 0
end

;; Find a safe spot around (cx, cy). Expands radius until something is free.
to-report find-safe-spot-around [cx cy spread myr panic-visibility]
  let world-max max (list world-width world-height)

  ;; If literally nowhere is legal, bail early.
  if not any? patches with [ safe-spot? pxcor pycor myr panic-visibility] [
    report list cx cy  ;; or: report nobody
  ]

  ;; Expand the search ring until we locate at least one legal patch.
  while [ true ] [
    let candidates patches with [
      distancexy cx cy <= spread and
      safe-spot? pxcor pycor myr panic-visibility
    ]
    if any? candidates [
      let p one-of candidates
      report list [pxcor] of p [pycor] of p
    ]
    set spread spread + 1
    if spread > world-max [
      ;; no point expanding further than the world size
      report list cx cy  ;; or: report nobody
    ]
  ]
end

